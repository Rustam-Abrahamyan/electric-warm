(()=>{"use strict";const t=class{constructor(t,e,s){this.b=1.9*Math.random()+.1,this.x0=t,this.y0=e,this.a=2*Math.random()*Math.PI,this.x1=this.x0+s*Math.cos(this.a),this.y1=this.y0+s*Math.sin(this.a),this.l=s}update(t,e){this.x0=t,this.y0=e,this.a=Math.atan2(this.y1-this.y0,this.x1-this.x0),this.x1=this.x0+this.l*Math.cos(this.a),this.y1=this.y0+this.l*Math.sin(this.a)}},e=class{constructor(e,s,h,i,n,o,a){this.context=e,this.res="l"==a?i/2:i/o,this.type=a,this.l=i,this.segment=[],this.b=n,this.rand=Math.random(),this.segment.push(new t(s,h,this.l/this.res));for(let e=1;e<this.res;e++)this.segment.push(new t(this.segment[e-1].x1,this.segment[e-1].y1,this.l/this.res))}update(t){this.segment[0].update(t.x,t.y);for(let t=1;t<this.res;t++)this.segment[t].update(this.segment[t-1].x1,this.segment[t-1].y1)}show(){const t="hsl("+(60*this.rand+180)+",100%,"+(60*this.rand+30)+"%)";if("l"==this.type){this.context.beginPath();for(let t=0;t<this.segment.length;t++)this.context.lineTo(this.segment[t].x0,this.segment[t].y0);this.context.lineTo(this.segment[this.segment.length-1].x1,this.segment[this.segment.length-1].y1),this.context.strokeStyle=t,this.context.lineWidth=this.b,this.context.stroke(),this.context.beginPath(),this.context.arc(this.segment[0].x0,this.segment[0].y0,1,0,2*Math.PI),this.context.fillStyle=t,this.context.fill(),this.context.beginPath(),this.context.arc(this.segment[this.segment.length-1].x1,this.segment[this.segment.length-1].y1,2,0,2*Math.PI),this.context.fillStyle=t,this.context.fill()}else{for(let e=0;e<this.segment.length;e++)this.context.beginPath(),this.context.arc(this.segment[e].x0,this.segment[e].y0,this.segment[e].b,0,2*Math.PI),this.context.fillStyle=t,this.context.fill();this.context.beginPath(),this.context.arc(this.segment[this.segment.length-1].x1,this.segment[this.segment.length-1].y1,2,0,2*Math.PI),this.context.fillStyle=t,this.context.fill()}}};window.onload=()=>{const t=document.getElementById("canvas"),s=t.getContext("2d");t.width=window.innerWidth,t.height=window.innerHeight,s.fillRect(0,0,t.width,t.height);const h={x:!1,y:!1},i=[],n=[],o={x:t.width/2,y:t.height/2},a=[];let l=0;for(let h=0;h<100;h++){const h=Math.random()>.25?"l":"o";i.push(new e(s,t.width/2,t.height/2,520*(1*Math.random()+.5),.4*Math.random()+.1,15*Math.random()+5,h)),n.push(2*Math.random()-1),a.push(0)}const g=()=>{var e;e=g,(window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return setTimeout(t,1e3/60)})(e),s.clearRect(0,0,t.width,t.height),(()=>{const{width:e,height:s}=t;let g,m;h.x?(g=h.x-o.x,m=h.y-o.y):(g=e/2+(s/2-10)*Math.sqrt(2)*Math.cos(l)/(Math.pow(Math.sin(l),2)+1)-o.x,m=s/2+(s/2-10)*Math.sqrt(2)*Math.cos(l)*Math.sin(l)/(Math.pow(Math.sin(l),2)+1)-o.y),o.x+=g/10,o.y+=m/10,l+=.01;for(let t=0;t<i.length;t++)n[t]>0?a[t]+=(1-n[t])/10:a[t]+=(-1-n[t])/10,i[t].update({x:o.x+50*n[t]*Math.cos(2*t*Math.PI/i.length+a[t]),y:o.y+50*n[t]*Math.sin(2*t*Math.PI/i.length+a[t])}),i[t].show()})()};t.addEventListener("mousemove",(e=>{h.x=e.pageX-t.offsetLeft,h.y=e.pageY-t.offsetTop}),!1),t.addEventListener("mouseleave",(()=>{h.x=!1,h.y=!1})),window.addEventListener("resize",(()=>{t.width,window.innerWidth,t.height,window.innerHeight})),g()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,